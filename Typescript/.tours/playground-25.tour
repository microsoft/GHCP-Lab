{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "Github Copilot (GHCP) Workshop - Playground 25",
  "steps": [
    {
      "file": "ParadigmShift.ts",
      "description": "Instead of telling the coding step-by-step, developers should now describe what they want through meaningful variable or function names and let Github Copilot figure out the how.",
      "pattern": "const canInventory",
      "title": "The Paradigm Shift"
    },
    {
      "file": "ParadigmShift.ts",
      "description": "Your task: **Get the make of the oldest car**\r\n\r\nNormally you'd write a find method with a comparison predicate of year and let Copilot do that for you.\r\nHowever, let's utilize copilot to the fullest and name our variable:\r\n\r\n\r\n`const getMakeOfOldestCar`\r\n\r\nAnd now, let Github Copilot autocomplete.\r\n\r\n\r\n\r\n",
      "pattern": "First task",
      "title": "First task"
    },
    {
      "file": "ParadigmShift.ts",
      "description": "**Get the total price of all the cars**\r\n\r\nInstead of using a reduce method to sum up all the values, let's leverage Copilot's predictive capabilities.\r\n\r\nSimply name your variable:\r\n\r\n`const totalPriceOfAllCars`\r\n\r\nAnd let Copilot handle the rest!",
      "pattern": "Second task",
      "title": "Second task"
    },
    {
      "title": "Code onboarding",
      "file": "LegacyCodeBase.ts",
      "description": "Let's ask Github Copilot to help us onboard with the following prompt:\r\n\r\nSummarize the #LegacyCodeBase.ts and provide a brief overview of what it does, then provide visualizations for the different flows.",
      "pattern": "class SmartHouseManager"
    },
    {
      "file": "LegacyCodeBase.ts",
      "description": "Here's is a snippet of a legacy code base. It's full of ToDos, and code which could be improved. \r\n\r\nLet's use Github Copilot to ease our assessment of technical debt.\r\n\r\n\"Gather all the todos from the file in the format of a table, add a column for the the content, add priority, and T-shirt size cost estimation\"",
      "pattern": "class SmartHouseManager",
      "title": "Identify technical debt"
    },
    {
      "file": "LegacyCodeBase.ts",
      "title": "Resolve technical debt",
      "description": "Ask Copilot in Agent mode, using any of the models:\r\n\r\n\"Help me get rid of these todos, implement them\"\r\n\r\nOnce it finishes please wait for the guide before proceeding.",
      "pattern": "TODO Create an interface",
      "selection": {
        "start": {
          "line": 3,
          "character": 2
        },
        "end": {
          "line": 3,
          "character": 48
        }
      }
    },
    {
      "file": "../GHCP-Typescript.code-workspace",
      "title": "Setup custom instructions",
      "description": "## Use VS Code workspaces\r\n\r\n1. Setup your Copilot instructions for test creation, code generation, code-reviews and even commit message\r\n2. Commit the workspace in your repo and instruct (ðŸ˜‰) your team to open it via VS Code.\r\n3. Instructions come in the form of free text or files. The more context you enrich Github Copilot with, the better results you'll get.",
      "pattern": "github.copilot.chat.commitMessageGeneration.instructions"
    },
    {
      "file": "LegacyCodeBase.ts",
      "description": "Now that we've setup custom instructions, let's re-trigger our prompt.\r\n\r\nPro tip âœ¨:\r\nInstead of copy-pasting the ask, simply hit the arrow-up key and hit return.\r\n\r\nYou should now see in the references that the instructions file is referenced.",
      "pattern": "Sixth task",
      "title": "Implement with instructions"
    }
  ],
  "isPrimary": true
}