{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "Advanced GHCP lab for C#",
  "steps": [
    {
      "file": "src/README-dotNet.md",
      "description": "Start here :) ",
      "line": 1,
      "title": "Start Here!"
    },
    {
      "file": "src/Alert.cs",
      "description": "This is the model of the alert, this is what we'll be iterating on.\r\n\r\n\r\nWe'll make aggregations on alerts and create functions to process alerts.\r\n\r\nTake a few seconds and take a look at it. ",
      "line": 3,
      "title": "Get to know your data!"
    },
    {
      "file": "src/Program.cs",
      "description": "This is the main function for our application. For now we are just getting a list of alerts (which we have mocked). Spoiler, will be used later.\r\n\r\nIn the following order, we'll take a look at GHCP Completions, Inline chat (and comments), then Chat, Edits and finally - Agent mode!\r\n\r\nLet us take a closer look at out mocked list of alerts.",
      "line": 8,
      "title": "Mocks and order of exercises"
    },
    {
      "file": "src/MockedAlerts.cs",
      "description": "This is our list of mocked alerts.\r\n\r\n**TASK** - Add a comma here (`,`) and hit Enter. GHCP's Code Completion should show you ghost text on adding more alerts.",
      "line": 142,
      "title": "Code Completions #1"
    },
    {
      "file": "src/Program.cs",
      "description": "**TASK** - Store the list of alerts in a variable. Then right click on the variable, and select `Rename Symbol (F2)`. You should see some Copilot suggestions for variable name.",
      "line": 10,
      "title": "Code Completions #2"
    },
    {
      "file": "src/Completions.cs",
      "description": "In this class, we will add some functions to demo GitHub Copilot code completion.\r\n\r\n**TASK #1**\r\n- Create a function that receives the list of `alerts` and a `locationName` as input, and finds the alerts which happened at `locationName`.\r\n- Please use `dynamic` for all return types, we will get to it later using inline chat.\r\n\r\n**TASK #2**\r\n- Create a function that receives the list of `alerts` as input, and returns the aggregated count of alerts by `Severity`. Example output: `{\"Critical\": 2, \"Medium\": 1, ....}`\r\n- Occasionally, you may not get the completion you want, you may use `Ctrl + Enter` to open the Suggestions panel, and see several options.\r\n\r\nUsing GHCP completions is optimal for Simple, Short and Specific logic (the 3 `S` principle), remember that!\r\n\r\nPro tips - Watch this for more context on the [3 `S` Principal](https://www.youtube.com/watch?v=hh1nOX14TyY&t=38s&ab_channel=VisualStudioCode)",
      "line": 8,
      "title": "Code Completions #3",
      "selection": {
        "start": {
          "line": 9,
          "character": 36
        },
        "end": {
          "line": 9,
          "character": 256
        }
      }
    },
    {
      "file": "src/Point.cs",
      "description": "The point of this file is demonstrate **Next Edit Suggestions**, rename Point to Point3D and move your cursor to the constructor, see how there's a green pop up? You can accept that with the Tab key or cancel with Esc",
      "line": 1,
      "title": "Next Edit Suggestions #1"
    },
    {
      "file": "src/Completions.cs",
      "description": "Time to try Inline Chat! Let's fix all these `dynamic` return types.\r\n\r\n**TASK** - Select all methods which include the `dynamic` return type, open inline chat using `Ctrl + I` (🍏: `Command + I`) and use the following prompt - `Instead of dynamic, use correct return type`\r\n\r\n**GHCP Inline Chat** - Using GHCP Inline Chat fits scenarios where -\r\n- You need to directly edit code\r\n- Generate code that does more than one thing at a time\r\n- Generate code for a very specific logic that's too long for a variable name\r\n- Generate code based on an example (yes, that's a recommendation!)\r\n\r\nIn VS Code the default shortcut is Ctrl + I (🍏: Command + I) to open inline chat.\r\n\r\n**AI Models** - You can select the AI model which Inline Chat uses.\r\n- Tokens are per model, so if you run out, simply switch a model. \r\n- GPT models are great for reasoning, 4o when you care more about speed and less about accuracy.\r\n- Claude models are superb for code generation. \r\n- Using Claude within VS Code **is allowed** and I'd recommend 3.7 over 3.5",
      "line": 30,
      "title": "Inline Chat #1"
    },
    {
      "file": "src/InlineChat.cs",
      "description": "**TASK** - Create a function which takes an alert and checks if the `AlertStatus` is not `Resolved` for more than seven days, log to console if so.\r\n\r\nNote -\r\n- Can I copy and paste this? The answer is yes. But how will you practice phrasing your requirements?\r\n- Lazy tip - **use speech**!\r\n   - If the thought of typing a lot is what deters you, consider talking to VS Code (aka _Vibe Coding_)! Using the extension \"VS Code Speech\" (Also recommended in workspace and should be installed) you can simply talk to VS Code with speech to text. This works very well and can be done both in editor, in inline chat as well as in the chat window, give it a go!\r\n- Once installed, you may invoke it within the inline chat using another click of `Ctrl + I` or simply press the mic button with the mouse.\r\n- Does the below code work? If not, try selecting the function, and prompt inline chat again with `\"/fix\"`.",
      "line": 8,
      "title": "Inline Chat #2"
    },
    {
      "file": "src/Chat.cs",
      "description": "Using GHCP Ask mode (previously called Chat) is ideal for discussions, questions, guidance and reassurance of your code. \r\n\r\nOpen GCHP side pane (Ctrl + Alt + I), and pick the Ask from the dropdown at the bottom next to the model picker. It's much easier to provide context in this experience and to use ALIASES. We'll talk about aliases next.\r\n\r\nThe more context you add, the more accurate and efficient Copilot would be.\r\n\r\n\r\nSome examples to use:\r\n1. \"Check if I missed any edge cases in #selection\"\r\n2. \"Can you provide a numerical example? To validate my logic. Format response as a table with inputs and output values\"\r\n3. \"How do I run the project?\"\r\n    - More often than not, the instructions may be a little obscure, Copilot knows how to simplify and provide simple commands.\r\n4. Using it for some git operations! \r\n    - \"How to edit the last commit message?\"\r\n\t- \"List all commits that have any editing of the path `packages/some_package`, format the list as table with columns 'author, commit message, date'\"",
      "line": 6,
      "title": "Ask mode intro"
    },
    {
      "title": "Context explanation",
      "description": "With GHCP, **context is everything**.\r\n\r\nThis is the GHCP context hierarchy: \r\n\r\n1. Cursor position -> Selection -> Active file -> Opened files. \r\n1. Additional context provided (files/ folders/ problems / changes/ search results)\r\n\r\nIf you see bad responses, it may be confused with older, no-longer-relevant, contexts. For better accuracy / responses:\r\n\r\n1. Try closing unused editor windows.\r\n1. Provide more context by attaching it directly using # operators, which also reduces search time for Copilot\r\n1. Don't ask about C# and jump to typescript, create a new chat for these subject jumps. You can always navigate to previous sessions\r\n1. Provide [Custom Instructions](https://docs.github.com/en/copilot/customizing-copilot/adding-repository-custom-instructions-for-github-copilot?tool=vscode#enabling-or-disabling-custom-instructions)."
    },
    {
      "file": "src/Chat.cs",
      "description": "Let's say you remembered there's an enum for `AlarmSeverity`, but looking at the file structure, you can't recall where it is.\r\nYou may use the @workspace scope or the #codebase context in GHCP to search for it. These two GHCP functionalties iterate over *the _open_ project* and can answer your questions on a project scope. Try asking in Ask mode\r\n\r\nUsing @workspace it where you can find the AlarmSeverity enum?\r\n\r\nTip: When searching in the project scope, be sure to deselect the active file attached by clicking the eye icon next to it.",
      "line": 8,
      "title": "Ask mode #1"
    },
    {
      "file": "src/Chat.cs",
      "description": "In Ask mode, run \"`/help`\"\r\n\r\nThere are many more aliases, even for the `Terminal` which is extremely useful to debug errors, recall git commands much more. I urge you to go into the Chat input and iterate over these prefixes\r\n1. \"`/`\" - Use specific functionality \"/test\", \"/explain\", \"/search\". \r\n1. \"`@`\" - Used to set a scope @github/@vscode/@workspace etc.\r\n1. \"`#`\" - Used to provide additional context.\r\n\r\nThere's a lot the Chat experience can provide and teach, don't hesitate to explore!\r\nUse the up and down arrows and spend a little time to read the descriptions of these commands.",
      "line": 21,
      "title": "Ask mode #2"
    },
    {
      "file": "src/Alert.cs",
      "description": "**Copilot Edits** (Shortcut: _Ctrl+Shift+I_)\r\n\r\nUsed to **edit multiple files at the same time**! \r\n\r\nChanges are applied directly to the files provided as context / detected by Copilot, these files are also called \"working set\" and recently the 10 file limit has been removed (yay). \r\n\r\n\r\nLet's start with the prompt:\r\n\r\n\"_Add a to string method to the Alert class. In addition, add logger to the project. Search the #codebase , in places the console was used to print anything, also append the alert to string method and log instead of printing to console_\"\r\n\r\n\r\nHit submit and watch the magic happens\r\n\r\nDon't forget to accept / discard the changes.",
      "line": 26,
      "title": "Copilot edits 😮",
      "selection": {
        "start": {
          "line": 19,
          "character": 3
        },
        "end": {
          "line": 19,
          "character": 46
        }
      }
    },
    {
      "file": "src/Program.cs",
      "description": "Introducing Agent mode, same functionality of editing multiple files, but with iterations. Let's call it edits ++ \r\n\r\nLet's ask Copilot to create the spec for our functionality:\r\n\r\n`\r\nI want the main function to use the different functions in Completions.cs and InlineChat.cs that exists in the code base. And allow the user to filter specific alerts based on inputs. So this will now be a console app that runs on the generated mocked alerts. The user will be able to get the current status by choosing a number from the menu which will execute a specific function.`\r\n\r\nBut before that, **copy the prompt above** and let's use our [special prompt](.github\\prompts\\Feature breakdown prompt.prompt.md):",
      "line": 18,
      "selection": {
        "start": {
          "line": 6,
          "character": 1
        },
        "end": {
          "line": 6,
          "character": 369
        }
      },
      "title": "Github Copilot Agent 🤯"
    },
    {
      "file": "src/Program.cs",
      "description": "Let us review and commit our changes.\r\n\r\n**TASK** - Go to the `Source Control` option in the side bar menu of VSCode. When you hover on `Changes` you should see some options pop up on the right. Select the 3rd option from left which says `Copilot Code Review - Uncommitted changes`. Watch GHCP review your code!\r\n\r\n**TASK** - In the `Message` text box, there should be a magic sparkle icon at the right which would say `Generate commit message with Copilot` when hovered on. Click on this icon to have GHCP generate a commit message for you.",
      "line": 1,
      "title": "Git tricks with GHCP"
    },
    {
      "file": "src/Program.cs",
      "description": "Congratulations!!!\r\n\r\n\r\nYou have completed the lab, I hope that you have learned a thing or two and had some fun while you're at it.\r\n\r\nRemember - \r\n\r\n**Short. Simple. Specific.**\r\n\r\nAnd provide the relevant context (#file/ #selection, etc.)\r\n\r\n---\r\n\r\nBonus content - Checkout http://aka.ms/adosweagent",
      "line": 19,
      "title": "Finishing up"
    }
  ]
}