{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "Advanced GHCP lab for C#",
  "steps": [
    {
      "file": "src/README-dotNet.md",
      "description": "Start here :) ",
      "line": 1,
      "title": "Start Here!"
    },
    {
      "file": "src/Alert.cs",
      "description": "This is the model of the alert, this is what we'll be iterating on.\r\n\r\n\r\nWe'll make aggregations on alerts and create functions to process alerts.\r\n\r\nTake a few seconds and take a look at it. ",
      "line": 3,
      "title": "Get to know your data!"
    },
    {
      "file": "src/Program.cs",
      "description": "We have mocked some alerts! Spoiler, will be used later.\r\n\r\nIn the following order, we'll take a look at GHCP Completions, Inline chat (and comments), then Chat, Edits and Agent!",
      "line": 8,
      "title": "Mocks and order of exercises"
    },
    {
      "file": "src/Program.cs",
      "description": "Using GHCP completions is optimal for Short, Specific and Simple logic (the 3 `S` principle), remember that!\r\n\r\n\r\n\r\nFor best completions results - \r\nName a variable according to the logic you expect and then refactor the name after.\r\n\r\nPro tips:\r\n1. GHCP also suggests names (!) if you press Refactor (F2) on the function/variable name.\r\n2. Watch this for more context on the [3 `S` Principal](https://www.youtube.com/watch?v=hh1nOX14TyY&t=38s&ab_channel=VisualStudioCode)",
      "line": 9,
      "title": "Completions introduction"
    },
    {
      "file": "src/Program.cs",
      "description": "Let's start easy, we'll create a variable to store the total number of alerts.\r\n\r\nSimply place your caret after the equal sign and the `Space` key",
      "line": 13,
      "title": "Completion #1"
    },
    {
      "file": "src/Completions.cs",
      "description": "Create a function that receives alerts and `locationName` and finds the alerts which happened at `locationName`.\r\n\r\nBut what about the return type? Please use `dynamic` for all return types, we will get to it later using inline chat.",
      "line": 14,
      "title": "Completion #2"
    },
    {
      "file": "src/Completions.cs",
      "description": "Create a function with an input of alerts and returns the aggregated count of alerts by Severity, example output: {\"Critical\": 2, \"Medium\": 1, ....}\r\n\r\n\r\nFriendly reminder that occasionally, you may not get the completion you want, you may use \r\n\r\n`Ctrl + Enter`\r\n\r\nTo open the `Suggestions panel`, and see several options (it may present very bad options, so proceed with care and feel free to only take what you need and ignore the rest)",
      "line": 12,
      "title": "Completion #3"
    },
    {
      "file": "src/Completions.cs",
      "description": "Create a function to get all alerts which happened between two specific dates.\r\n\r\nNow, how would that change if you wanted to get alerts between specific hours, as string? Create a function for that too.",
      "line": 16,
      "title": "Completion #4"
    },
    {
      "file": "src/Completions.cs",
      "description": "Top Alert Sources: Create a function that takes all alerts and finds the most common source of alerts. ",
      "line": 18,
      "title": "Completion #5"
    },
    {
      "file": "src/Completions.cs",
      "description": "Let's try to be more specific, when you type `dynamic filter alertsWithLongName` what is the length you get, try it.\r\n\r\nDoes that \"satisfy\" the requirement? What if you wanted it to be a little longer let's say more than 12 characters?\r\n\r\nThink of how'd you write name that variable in a more specific way - you can always rename after.",
      "line": 20,
      "title": "Completions #6"
    },
    {
      "file": "src/Point.cs",
      "description": "The point of this file is demonstrate Next Edit Suggestions, rename Point to Point3D and move your cursor to the constructor, see how there's a green pop up? You can accept that with the Tab key or cancel with Esc",
      "line": 1,
      "title": "Next Edit Suggestions"
    },
    {
      "file": "src/Completions.cs",
      "description": "So we now know to name the variable according to what the logic we want it to execute, and then rename it for easier reading. \r\n\r\n\r\nAs a perfect segway for inline chat, let's now fix all these \"dynamic\" return types.\r\nSelect all the methods which include the dynamic return type, open inline chat (using CTRL + I) and use the following prompt: \r\n\r\n\"**Instead of dynamic, use correct return type**\"\r\n\r\nGithub Copilot should fix these to be the correct return type auto-magically âœ¨.",
      "line": 30,
      "title": "Completions summary"
    },
    {
      "file": "src/InlineChat.cs",
      "description": "Using GHCP Inline Chat fits scenarios where you need more than one thing at a time, a very specific logic that's too long for a variable name, or you want to provide examples (yes, that's a recommendation!).\r\n\r\n\r\nIn VS Code the default shortcut is ctrl + I to open inline chat",
      "line": 5,
      "title": "Inline chat introduction"
    },
    {
      "file": "src/InlineChat.cs",
      "description": "Your task: \r\n\r\nCreate a function which takes an alert and checks if the `AlertStatus` is not `Resolved` for more than seven days, log to console if so.\r\n\r\nNow you're probably thinking - \r\n\r\nCan I copy and paste this? The answer is yes. But how will you practice phrasing your requirements? \r\n\r\nDoes the below code work? If not, try selecting the function, and prompt inline chat again with `\"/fix\"`.\r\n\r\nLazy tip:\r\nIf the thought of typing a lot is what deters you, consider talking to VS Code! Using the extension \"VS Code Speech\" (Also recommended in workspace and should be installed) you can simply talk to VS Code with speech to text. This works very well and can be done both in editor, in inline chat as well as in the chat window, give it a go!\r\nOnce installed, you may invoke it within the inline chat using another click of `Ctrl + I` or simply press the mic button",
      "line": 8,
      "title": "Inline chat #1"
    },
    {
      "file": "src/InlineChat.cs",
      "description": "Create a method which accepts a list of alerts and as a parameter, checks if there are any alerts with Critic severity which are still active, return these alerts.\r\n\r\n\r\n\r\nNow we have to stop for a second to ask:\r\nBut why can't I simply use comments instead? They are also left in the repo explaining what the code below does! \r\n\r\n1. Code gets refactored, comments usually do not. These comments will demand a cleanup in the future and get disregarded and become unrelevant.\r\n2. More importantly, comments with GHCP aren't iterable, meaning it's a one-shot completions attempt. If you get it wrong, you have to edit your comment and try again. When using the inline chat you can then reply with what needs to be fixed. Just think of how rare it is when you code things that work for the first time, the better you are explaining what you want to GHCP, the better GHCP will help you, sometimes it takes a few rounds of explanations, a.k.a. \"inline chat ;)\"",
      "line": 10,
      "selection": {
        "start": {
          "line": 1,
          "character": 1
        },
        "end": {
          "line": 1,
          "character": 162
        }
      },
      "title": "Inline chat #2"
    },
    {
      "file": "src/InlineChat.cs",
      "description": "Create a method which receives a list of alerts, a locationName and a severity level and checks if location had any alerts with provided severity",
      "line": 12,
      "selection": {
        "start": {
          "line": 1,
          "character": 1
        },
        "end": {
          "line": 1,
          "character": 14
        }
      },
      "title": "Inline chat #3"
    },
    {
      "file": "src/InlineChat.cs",
      "description": "Filter alerts which have a source of everything but words ending with 'phone'.\r\nI.e Source == 'Sensor', yes, 'telephone', no, 'microphone', no. Log to console when matched and return alerts",
      "line": 14,
      "title": "Inline chat #4"
    },
    {
      "file": "src/InlineChat.cs",
      "description": "Using Inline Chat gives us significant advantages over completions and comments. With Inline Chat, we can:\n\n1. Handle complex, multi-step tasks that are too lengthy for variable names\n2. Iterate on our requirements through conversation rather than starting over\n3. Provide specific examples to clarify our intent\n4. Fix and refine code through multiple prompts\n\nRemember to use `/fix` when you need to fix existing code, and consider using speech-to-text for more natural interactions. When defining your requirements, be as specific as possible about the task you're trying to accomplish, including expected inputs, outputs, and edge cases.",
      "line": 14,
      "title": "Inline chat summary"
    },
    {
      "file": "src/Chat.cs",
      "description": "Using GHCP Chat is ideal for discussions, questions and guidance and reassurance of your code. \r\nWith GCHP chat (CTRL + ALT + I), it's much easier to provide more context using ALIASES, we'll talk about aliases next.\r\nThe more context you add, the more capable Copilot would be.\r\n\r\n\r\nSome (none?) standard examples one can use:\r\n1. \"Check if I missed any edge cases in #selection\"\r\n2. \"Can you provide a numerical example?\" (If you can't remember if you should compare time)\r\n3. \"How do I run the project?\" More often than not, the instructions may be a little obscure, Copilot knows how to simplify and provide simple commands.\r\n4. Using it for some git operations! \"What command to edit the last commit message?\"\r\n\r\nRemember context is everything, if GHCP chat starts providing bad information, it may be confused with older contexts, don't ask him about C# and jump to typescript, create a new chat for these subject jumps. You can always navigate to previous sessions.\r\n",
      "line": 6,
      "title": "Chat introduction"
    },
    {
      "file": "src/Chat.cs",
      "description": "Let's say you remembered there's an enum for `AlarmSeverity`, but looking at the file structure, you can't recall what it is.\r\nYou may use the @workspace alias or the #codebase context accessor in GHCP to search for it. Try both, first use @workspace, then in chat, click up arrow and replace @workspace with #codebase. \r\n\r\nThese two GHCP functions iterate over *all the project* and can answer your questions on a project scope.\r\n\r\nLet's start by asking it where you can find the AlarmSeverity enum? \r\n\r\nUse the @workspace alias (in the beginning of the question) or #codebase anywhere in your question, there's a subtle difference by how it displays the answer, give it a go!\r\n\r\nTip: When searching in the project scope, be sure to deselect the active file attached by clicking the eye icon next to it.",
      "line": 8,
      "title": "Chat #1"
    },
    {
      "file": "src/Chat.cs",
      "description": "Let's give it another go. \r\nIn the repo, I've hidden a few SECRETs. Try using Copilot to find these secrets, let's see if you can find all 4.\r\n\r\nUse the prompt: \"List all secrets in #codebase\"",
      "line": 10,
      "title": "Chat #2",
      "selection": {
        "start": {
          "line": 4,
          "character": 18
        },
        "end": {
          "line": 4,
          "character": 47
        }
      }
    },
    {
      "file": "src/Chat.cs",
      "description": "Now let's use #selection, this is what you should be using when asking code-specific-questions or writing unit tests. Highlight the text desired and in your question (even in inline-chat) use the #selection alias.\r\n\r\nLet's try it now: \r\n1. Highlight the method\r\n2. Ask in chat \"What edge cases did I miss\"?\r\n",
      "line": 12,
      "title": "Chat #3"
    },
    {
      "file": "src/Chat.cs",
      "description": "While trivial, lot's of developers tend to jump into code and start reading it to understand, natural language is still faster to comprehend. You can use the `/explain` alias and read it in plain text, it's pretty accurate.",
      "line": 17,
      "title": "Chat #4"
    },
    {
      "file": "src/Chat.cs",
      "description": "Finally, let's write some unit tests using GHCP.\r\nRemember what we said? \r\nHighlight the desired code to test, in our case the Divider function. let's write up unittests for it, remember to fix the missing edge case first.\r\n\r\nIn chat, write:\r\n\r\n`@workspace /tests Write unit tests for #selection using NUnit`\r\n\r\n\r\nDon't forget to metion which test framework you're using as it may vary.",
      "line": 19,
      "selection": {
        "start": {
          "line": 6,
          "character": 1
        },
        "end": {
          "line": 6,
          "character": 54
        }
      },
      "title": "Chat #5"
    },
    {
      "file": "src/Chat.cs",
      "description": "There are many more aliases, even for the `Terminal` which is extremely useful to debug errors, recall git commands much more. I urge you to go into the Chat input and iterate over these prefixes\r\n1. \"`/`\" - Use specific funcionality \"/test\", \"/explain\", \"/search\". Let's try out \"/help\"\r\n1. \"`@`\" - Used to set a scope @github/@vscode/@workspace etc.\r\n1. \"`#`\" - Used to provide additional context. Recently #folder and #problem were introduced and are helpful in scoping the context\r\n\r\nThere's a lot the Chat experience can provide and teach, don't hesitate to explore!\r\nUse the up and down arrows and spend a little time to read the descriptions of these commands.",
      "line": 21,
      "title": "Chat #6"
    },
    {
      "file": "src/Alert.cs",
      "description": "**Copilot Edits** (Shortcut: _Ctrl+Shift+I_)\r\n\r\nUsed to **edit multiple files at the same time**! \r\n\r\nChanges are applied directly to the files provided as context / detected by Copilot, these files are also called \"working set\" and recently the 10 file limit has been removed (yay). \r\n\r\n\r\nLet's start with the prompt:\r\n\r\n\"_Add a to string method to the Alert class. In addition, add logger to the project. Search the #codebase , in places the console was used to print anything, also append the alert to string method and log instead of printing to console_\"\r\n\r\n\r\nHit submit and watch the magic happens\r\n\r\nDon't forget to accept / discard the changes.",
      "line": 26,
      "title": "Copilot edits ðŸ˜®",
      "selection": {
        "start": {
          "line": 19,
          "character": 3
        },
        "end": {
          "line": 19,
          "character": 46
        }
      }
    },
    {
      "file": "src/Program.cs",
      "description": "Introducing Agent mode, same functionality of editing multiple files, but with iterations. Let's call it edits ++ \r\n\r\nLet's ask Copilot to create the spec for our functionality:\r\n\r\n`\r\nI want the main function to use the different functions that exists in the code base. And allow the user to filter specific alerts based on inputs. So this will now be a console app that runs on the generated alerts, and while the alerts are generated every second in the background.Without interfering with alert generation, the user will be able to get the current status by choosing a number from the menu which will execute a specific function.`\r\n\r\nBut before that, **copy the prompt above** and let's use our [special prompt](.github\\prompts\\Feature breakdown prompt.prompt.md):\r\n\r\n\r\nCtrl + Shift + P -> Use prompt\r\n\r\nPaste the prompt, and take the response.",
      "line": 18,
      "selection": {
        "start": {
          "line": 4,
          "character": 1
        },
        "end": {
          "line": 8,
          "character": 1
        }
      },
      "title": "Github Copilot Agent ðŸ¤¯"
    },
    {
      "file": "src/Program.cs",
      "description": "Congratulations!!!\r\n\r\n\r\nYou have completed the lab, I hope that you have learned a thing or two and had some fun while you're at it.\r\n\r\nRemember - \r\n\r\n\r\nShort.\r\n\r\n\r\nSimple.\r\n\r\n\r\nSpecific.\r\n\r\n\r\n\r\n\r\nAnd provide the relevant context (#file/ #selection, etc.)",
      "line": 19,
      "title": "Finishing up"
    }
  ],
  "ref": "main"
}